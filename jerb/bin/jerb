#!/usr/bin/python

import os
import sys
import jerb.shell as sh
import jerb.net as net
from jerb.Jerb import Jerb 
from jerb.JerbRepo import JerbRepo


def print_usage():
    """ Prints usage information to the user. """
    print("""Example jerb workflow:

    # 1. Find some Jerbs stored in the cloud:
    jerb find '{"user.name": "Ivar Thorson"}'

    # 2. Download the jerbs you want
    jerb fetch b01736e3d0d53d36387af67bc5cdbef78d1b7381 > hello.jerb
    jerb fetch 90d94d3479e40fd001ab4e4c91e3d5b5c7955d43 > world.jerb

    # 3. Unpack the jerbs and double check they are what you want
    jerb unpack hello.jerb world.jerb

    # 4. Merge those jerbs into a repo and start working
    jerb init <my_new_repo_name>
    cd <my_new_repo_name>
    jerb merge hello.jerb
    jerb merge world.jerb
    
    # 5. A) Hack away in this repo with your editor
    #    B) git add, git commit, repeat

    # 6. Optional: update the repo's metadata to tag it with more information
    jerb meta

    # 7. Pack up the git repo into a new jerbfile
    jerb jerb > newjerb.jerb

    # 8. Optional: Upload your jerb to jerbs.org to share it with others
    jerb share newjerb.jerb
    
    """)


def handle_command_line():
    """ Reads in the arguments from the command line """

    if len(sys.argv) < 2:
        print_usage()
        exit(-1)

    op = sys.argv[1]

    if op == 'init':
        sh.ensure_not_in_git_dir()
        JerbRepo(sys.argv[2], create=True)
        exit(0)

    elif op == 'help':
        print_usage()
        exit(0)

    elif op == 'meta':
        sh.ensure_in_git_dir()
        jr = JerbRepo('./')
        jr.edit_metadata()
        exit(0)

    elif op == 'jerb':
        sh.ensure_in_git_dir()
        jr = JerbRepo('./')
        js = jr.as_json()
        print(js)
        exit(0)

    elif op == 'share':
        if len(sys.argv) < 3:
            sh.ragequit('Usage: jerb share <file1.jerb> [<file2.jerb> ...]')
        jerbfiles = []
        for f in sys.argv[2:]:
            if not os.path.exists(f):
                sh.ragequit('Not a file: ' + f + "\n")
            jerbfiles.append(f)
        for j in jerbfiles:
            (r1, r2) = net.share_jerbfile(j)

            if (r1.status_code == 200):
                storecode = "EXISTS  "
            elif (r1.status_code == 201):
                storecode = "ADDED   "
            else:
                storecode = "ERROR   "

            if r2.status_code == 200:
                indexcode = "INDEXED "
            else:
                indexcode = "ERROR   "                    

            print(storecode + indexcode + " " + j)

        exit(0)

    elif op == 'find':
        if len(sys.argv) != 3:
            sh.ragequit("""Usage: jerb find '{"user.name"="Ivar Thorson"}'""")
        query = sys.argv[2]
        jids = net.find_jerbs(query)
        for j in jids:
            print(j)
        exit(0)

    elif op == 'fetch':
        if len(sys.argv) != 3:
            sh.ragequit("Usage: jerb fetch <jid>")
        for jid in sys.argv[2:]:
            j = net.fetch_jerb(jid)
            print(j)
        exit(0)

    elif op == 'merge':    
        sh.ensure_in_git_dir()
        if len(sys.argv) < 3:
            sh.ragequit('Usage: jerb merge <file1.jerb> [<file2.jerb> ...]')
        jr = JerbRepo('./')
        jerbs = []
        for f in sys.argv[2:]:
            if not os.path.exists(f):
                sh.ragequit('Not a file: ' + f + "\n")
            jerbs.append(load_jerb_from_file(f))
        for j in jerbs:
            jr.merge_in_jerb(j)

    else:
        sh.ragequit("Unknown command: " + op + "\n")


handle_command_line()
