#!/usr/bin/python

import os
import sys
import jerb.lib as jb


def print_usage():
    """ Prints usage information to the user. """
    print("""Example jerb workflow:

    # 1. Create a new, empty jerb/git repository 
    jerb init <my_new_repo_name>

    # 2. Download and merge one or more .jerb files into this repository
    cd <my_new_repo_name>
    curl https://jerbs.org/jid/9832476701987984398342 -o jerbfile1.jerb
    jerb merge <jerbfile1.jerb> [jerbfile2.jerb ...]

    # 3. A) Hack away in this repo with your editor
    #    B) git add, git commit, then go back to A) if desired

    # 4. Optional: update the repo's metadata to tag it with more information
    jerb meta

    # 5. Pack up the git repo into a new jerbfile
    jerb jerb > newjerb.jerb

    # 6. Optional: Upload your jerb to jerbs.org to share it with others
    jerb share newjerb.jerb
    """)


def handle_command_line():
    """ Reads in the arguments from the command line """

    if len(sys.argv) < 2:
        print_usage()
        exit(-1)

    op = sys.argv[1]

    if op == 'init':
        jb.ensure_not_in_git_dir()
        jb.init_jerb_repo(sys.argv[2])        
        exit(0)

    elif op == 'help':
        print_usage()
        exit(0)

    elif op == 'meta':
        jb.ensure_in_git_dir()
        jb.edit_metadata()
        exit(0)

    elif op == 'jerb':
        jb.ensure_in_git_dir()
        pk = jb.make_single_pack()
        ref = jb.get_master_ref()
        js = jb.make_jerbstring(pk, ref)
        print(js) # TODO: Should I save to a default JID filename?
        exit(0)

    elif op == 'share':
        if len(sys.argv) < 3:
            ragequit('Usage: jerb share <file1.jerb> [<file2.jerb> ...]')
        jerbfiles = []
        for f in sys.argv[2:]:
            if not os.path.exists(f):
                jb.ragequit('Not a file: ' + f + "\n")
            jerbfiles.append(f)
        for j in jerbfiles:
            jb.upload_jerbfile_to_jerbstore(j)
            jb.upload_jerbfile_to_jerb_index(j)
        exit(0)

    elif op == 'merge':    
        jb.ensure_in_git_dir()
        if len(sys.argv) < 3:
            ragequit('Usage: jerb merge <file1.jerb> [<file2.jerb> ...]')
        jerbs = []
        for f in sys.argv[2:]:
            if not os.path.exists(f):
                jb.ragequit('Not a file: ' + f + "\n")
            jerbs.append(jb.load_jerb_from_file(f))
        for j in jerbs:
            jb.unpack_jerb(j)

    else:
        jb.ragequit("Unknown command: " + op + "\n")


handle_command_line()
