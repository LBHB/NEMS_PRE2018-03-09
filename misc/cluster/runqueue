#!/bin/bash -f

# runqueue
# created svd 6/8/03
# designed to launch a process from dbqueuemaster.m batching daemon

PATH=$PATH:$HOME/bin
export PATH

QUEUEID=$1
export QUEUEID

QPID=$$
export QPID

TMP="/tmp/$QUEUEID"
export TMP
mkdir -p $TMP

MPLCONFIGDIR="/home/nems/nems/nems_config/matplotlib"
export MPLCONFIGDIR

export MKL_NUM_THREADS=1
export NUMEXPR_NUM_THREADS=1
export OMP_NUM_THREADS=1

QUEUEIDROUNDED=`expr $QUEUEID / 1000 * 1000`
DOMAIN=`hostname -d`
if [ "$DOMAIN" == "us-west-2.compute.internal" ] ;
then
  DBSERVER="kamzik.org"
  DBPORT="19555"
  QUEUEOUTPATH="/auto/nems/queue"
else
  DBSERVER="hyrax"
  DBPORT="3306"
  QUEUEOUTPATH="/auto/data/web/celldb/queue"
fi
DBUSER="david"
DBPASSWORD="nine1997"

export QUEUEOUTPATH

if [ ! -d "$QUEUEOUTPATH/$QUEUEIDROUNDED" ] 
then
    mkdir -p "$QUEUEOUTPATH/$QUEUEIDROUNDED"
    chmod a+wrx "$QUEUEOUTPATH/$QUEUEIDROUNDED"
fi

echo "QUEUEID=$QUEUEID QPID=$QPID TMP=$TMP" > $QUEUEOUTPATH/$QUEUEIDROUNDED/$QUEUEID.out
chmod a+w $QUEUEOUTPATH/$QUEUEIDROUNDED/$QUEUEID.*

QUEUEPARMS=$(mysql --host=$DBSERVER --user=$DBUSER --password=$DBPASSWORD --raw --database=cell --execute="select parmstring from tQueue where id=$QUEUEID;" | tail -n +2)
export QUEUEPARMS

# tell the queue where're starting
mysql --host=$DBSERVER --user=$DBUSER --password=$DBPASSWORD --port=$DBPORT --database=cell --execute="UPDATE tQueue SET complete=-1,pid=$QPID WHERE id=$1"

# run the queued command
# pop first arg (QUEUEID), use rest of 
# command line as program to run
shift

# prelim code for running off of arbitrary hash code:
#   CODEHASH=$(mysql --host=$DBSERVER --user=$DBUSER --password=$DBPASSWORD --port=$DBPORT --database=cell --execute="select codeHash from tQueue where id=$QUEUEID;")
#   export CODEHASH
# if [ ! -z "$CODEHASH" ]; then
#   #make new temp directory and clone specific version of repository
#   TMPDIR='nemstemp/$QUEUEID'
#   mkdir -p $TMPDIR
#   cd $TMPDIR
#   git clone https://bitbucket.org/lbhb/nems.git
#   cd nems
#   git checkout $CODEHASH
#   #need some check here for if checkout fails. should default to master?
#   # or maybe just not run the job at all

#   #call shift command again to remove $1 which is currently the path to
#   #nems_fit_single in the main nems directory
#   shift
#   #do echo and exec statements similar to below but insert path to temp dir
#   echo "PATH: $PATH" >> $QUEUEOUTPATH/$QUEUEIDROUNDED/$QUEUEID.out
#   echo "MATLABPATH: $MATLABPATH" >> $QUEUEOUTPATH/$QUEUEIDROUNDED/$QUEUEID.out
#   echo "COMMAND: nice -n19 /$TMPDIR/nems_fit_single.py $*" >> $QUEUEOUTPATH/$QUEUEIDROUNDED/$QUEUEID.out
#   exec nice -n19 /$TMPDIR/nems_fit_single.py $* >> $QUEUEOUTPATH/$QUEUEIDROUNDED/$QUEUEID.out 2>&1
# else:
#   do the stuff below as normal if no hash code 

echo "PATH: $PATH" >> $QUEUEOUTPATH/$QUEUEIDROUNDED/$QUEUEID.out
echo "MATLABPATH: $MATLABPATH" >> $QUEUEOUTPATH/$QUEUEIDROUNDED/$QUEUEID.out
echo "COMMAND: nice -n19 $*" >> $QUEUEOUTPATH/$QUEUEIDROUNDED/$QUEUEID.out

# exec means pid will be taken over by the queued job itself
exec nice -n19 $* >> $QUEUEOUTPATH/$QUEUEIDROUNDED/$QUEUEID.out 2>&1

# fi